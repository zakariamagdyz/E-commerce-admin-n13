// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  Store         Store[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String      @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[]
  Category   Category[]
  Size       Size[]
}

model Billboard {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  store     Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String     @db.ObjectId
  label     String
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade)
  billboardId String    @db.ObjectId
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Size {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String   @db.ObjectId
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
